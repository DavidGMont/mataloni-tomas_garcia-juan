package com.matalonigarcia.clinicaodontologica.service.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.matalonigarcia.clinicaodontologica.dto.OdontologoDto;
import com.matalonigarcia.clinicaodontologica.entity.Odontologo;
import com.matalonigarcia.clinicaodontologica.exceptions.ResourceNotFoundException;
import com.matalonigarcia.clinicaodontologica.repository.OdontologoRepository;
import com.matalonigarcia.clinicaodontologica.service.IOdontologoService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@Slf4j
public class OdontologoService implements IOdontologoService {
    private final OdontologoRepository odontologoRepository;
    private final ObjectMapper mapper;

    @Autowired
    public OdontologoService(OdontologoRepository odontologoRepository, ObjectMapper mapper) {
        this.odontologoRepository = odontologoRepository;
        this.mapper = mapper;
    }

    @Override
    public OdontologoDto registrarOdontologo(Odontologo odontologo) {
        OdontologoDto odontologoDto = mapper.convertValue(odontologoRepository.save(odontologo), OdontologoDto.class);
        LOGGER.info("üë®‚Äç‚öïÔ∏è Se registr√≥ correctamente al odont√≥logo: {}.", odontologoDto);
        return odontologoDto;
    }

    @Override
    public OdontologoDto buscarOdontologoPorId(Long id) throws ResourceNotFoundException {
        Odontologo odontologoBuscado = odontologoRepository.findById(id).orElse(null);
        OdontologoDto odontologoDto;
        if (odontologoBuscado != null) {
            odontologoDto = mapper.convertValue(odontologoBuscado, OdontologoDto.class);
            LOGGER.info("üë®‚Äç‚öïÔ∏è Se ha encontrado al odont√≥logo con ID {}: {}.", id, odontologoDto);
        } else {
            LOGGER.error("üõë El odont√≥logo solicitado con ID {} no est√° registrado en la base de datos.", id);
            throw new ResourceNotFoundException("üõë Lastimosamente, el odont√≥logo al que buscas ya no se encuentra "
                    .concat("con nosotros ¬øy si buscas uno nuevo?"));
        }
        return odontologoDto;
    }

    @Override
    public List<OdontologoDto> listarTodosLosOdontologos() {
        List<OdontologoDto> odontologoDtos = odontologoRepository
                .findAll()
                .stream()
                .map(odontologo -> mapper.convertValue(odontologo, OdontologoDto.class))
                .toList();
        LOGGER.info("ü¶∑ Listando todos los odont√≥logos: {}.", odontologoDtos);
        return odontologoDtos;
    }

    @Override
    public OdontologoDto actualizarOdontologo(Odontologo odontologo) throws ResourceNotFoundException {
        Odontologo odontologoAActualizar = odontologoRepository.findById(odontologo.getId()).orElse(null);
        OdontologoDto odontologoActualizadoDto;
        if (odontologoAActualizar != null) {
            odontologoAActualizar = odontologo;
            odontologoActualizadoDto = registrarOdontologo(odontologoAActualizar);
            LOGGER.warn("üõë El odont√≥logo con ID {} ha sido actualizado: {}.", odontologo.getId(),
                    odontologoActualizadoDto);
        } else {
            LOGGER.error("üõë No es posible actualizar el odont√≥logo porque no est√° registrado en la base de datos.");
            throw new ResourceNotFoundException("üõë No es posible actualizar a un odont√≥logo que no existe desde el "
                    .concat("principio, por favor registra a tu odont√≥logo, luego, si quieres actualizarlo, ")
                    .concat("ven con su ID."));
        }
        return odontologoActualizadoDto;
    }

    @Override
    public void eliminarOdontologo(Long id) throws ResourceNotFoundException {
        if (odontologoRepository.existsById(id)) {
            odontologoRepository.deleteById(id);
            LOGGER.warn("üöÆ Se ha eliminado al odont√≥logo con ID {}.", id);
        } else {
            LOGGER.error("üõë Se intent√≥ eliminar el odont√≥logo con ID {}, pero este no existe en la base de datos.",
                    id);
            throw new ResourceNotFoundException("üõë Sabemos que no te agrada el odont√≥logo con ID "
                    .concat(id.toString()).concat(", pero √©l solamente existe en nuestros recuerdos, ")
                    .concat("de nuestra base de datos se retir√≥ hace alg√∫n tiempo..."));
        }
    }
}
