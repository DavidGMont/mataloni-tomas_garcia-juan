package com.matalonigarcia.clinicaodontologica.controller;

import com.matalonigarcia.clinicaodontologica.dto.OdontologoDto;
import com.matalonigarcia.clinicaodontologica.entity.Odontologo;
import com.matalonigarcia.clinicaodontologica.exceptions.ResourceNotFoundException;
import com.matalonigarcia.clinicaodontologica.service.impl.OdontologoService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@CrossOrigin
@RestController
@RequestMapping("/odontologos")
@Tag(name = "Odont√≥logos", description = "üë®‚Äç‚öïÔ∏è M√©todos CRUD para gestionar odont√≥logos.")
public class OdontologoController {
    private final OdontologoService odontologoService;

    @Autowired
    public OdontologoController(OdontologoService odontologoService) {
        this.odontologoService = odontologoService;
    }

    @Operation(summary = "üë®‚Äç‚öïÔ∏è Registrar un odont√≥logo",
            description = "Crea un odont√≥logo nuevo en nuestra API, solamente env√≠anos los datos como los " +
                    "requerimos, et voil√† !",
            responses = {
                    @ApiResponse(
                            responseCode = "201",
                            description = "üôå Odont√≥logo creado exitosamente ¬°Se ha unido un nuevo integrante " +
                                    "al equipo!",
                            content = {
                                    @Content(mediaType = "application/json",
                                            schema = @Schema(implementation = OdontologoDto.class))
                            }),
                    @ApiResponse(
                            responseCode = "400",
                            description = "üòü Tu solicitud no cumple con los requisitos y no se cre√≥ al odont√≥logo, " +
                                    "por favor intenta nuevamente.",
                            content = @Content),
                    @ApiResponse(
                            responseCode = "404",
                            description = "üîé Eso que buscas, no existe, al menos en nuestra base de datos.",
                            content = @Content),
                    @ApiResponse(
                            responseCode = "500",
                            description = "üíª No eres t√∫, es el servidor; por favor, intenta nuevamente en breve.",
                            content = @Content)
            })
    @PostMapping("/registrar")
    public ResponseEntity<OdontologoDto> registrarOdontologo(@Valid @RequestBody Odontologo odontologo) {
        return ResponseEntity.status(HttpStatus.CREATED).body(odontologoService.registrarOdontologo(odontologo));
    }

    @Operation(summary = "üîç Buscar un odont√≥logo por ID",
            description = "Consulta a ese odont√≥logo que creaste antes, solamente p√°same su ID y te paso toda " +
                    "su informaci√≥n.",
            responses = {
                    @ApiResponse(
                            responseCode = "200",
                            description = "üë®‚Äç‚öïÔ∏è Encontraste a tu odont√≥logo ¬øy si ahora agendas un turno con √©l?",
                            content = {
                                    @Content(mediaType = "application/json",
                                            schema = @Schema(implementation = OdontologoDto.class))
                            }
                    ),
                    @ApiResponse(
                            responseCode = "400",
                            description = "üö® ¬°P√°same solamente n√∫meros!",
                            content = @Content
                    ),
                    @ApiResponse(
                            responseCode = "404",
                            description = "üîé Ese odont√≥logo que pensabas que exist√≠a, ya no existe (al menos en " +
                                    "nuestra base de datos).",
                            content = @Content
                    ),
                    @ApiResponse(
                            responseCode = "500",
                            description = "üíª No eres t√∫, es el servidor; por favor, intenta nuevamente en breve.",
                            content = @Content
                    )
            })
    @GetMapping("/{id}")
    public ResponseEntity<OdontologoDto> buscarOdontologoPorId(@PathVariable Long id) throws ResourceNotFoundException {
        return ResponseEntity.ok(odontologoService.buscarOdontologoPorId(id));
    }

    @Operation(summary = "ü¶∑ Listar todos los odont√≥logos",
            description = "Consulta nuestro variado cat√°logo de odont√≥logos ¬øBuscas a Philip Sherman? ¬°Lo tenemos! " +
                    "¬øO acaso a Wilbur Wonka? ¬°Pues tambi√©n lo tenemos! üíÖ",
            responses = {
                    @ApiResponse(
                            responseCode = "200",
                            description = "ü¶∑ He aqu√≠ todos los odont√≥logos que tenemos, seguro encuentras a tu " +
                                    "favorito.",
                            content = {
                                    @Content(mediaType = "application/json",
                                            schema = @Schema(implementation = OdontologoDto.class))
                            }
                    ),
                    @ApiResponse(
                            responseCode = "400",
                            description = "üö® La probabilidad de encontrar este error es m√≠nima, y, aun as√≠, lo " +
                                    "lograste encontrar ¬øquieres un premio?",
                            content = @Content
                    ),
                    @ApiResponse(
                            responseCode = "404",
                            description = "üîé Eso que buscas, no existe, al menos en nuestra base de datos.",
                            content = @Content
                    ),
                    @ApiResponse(
                            responseCode = "500",
                            description = "üíª No eres t√∫, es el servidor; por favor, intenta nuevamente en breve.",
                            content = @Content
                    )
            })
    @GetMapping
    public List<OdontologoDto> listarTodosLosOdontologos() {
        return odontologoService.listarTodosLosOdontologos();
    }

    @Operation(summary = "üîÅ Actualizar un odont√≥logo",
            description = "¬øCon que tu odont√≥logo no era ese que hab√≠a dicho ser? ¬øO se te fue un dato errado? " +
                    "¬°Corr√≠gelo aqu√≠! Solamente necesitas consultar los datos ya guardados y remplazarlos.",
            responses = {
                    @ApiResponse(
                            responseCode = "200",
                            description = "üë®‚Äç‚öïÔ∏è Actualizaste tu odont√≥logo correctamente ¬øacaso no qued√≥ m√°s lindo?",
                            content = {
                                    @Content(mediaType = "application/json",
                                            schema = @Schema(implementation = OdontologoDto.class))
                            }
                    ),
                    @ApiResponse(
                            responseCode = "400",
                            description = "üòü Tu solicitud no cumple con los requisitos y no se actualiz√≥ al " +
                                    "odont√≥logo, por favor intenta nuevamente.",
                            content = @Content
                    ),
                    @ApiResponse(
                            responseCode = "404",
                            description = "üîé Eso que buscas, no existe, al menos en nuestra base de datos.",
                            content = @Content
                    ),
                    @ApiResponse(
                            responseCode = "500",
                            description = "üíª No eres t√∫, es el servidor; por favor, intenta nuevamente en breve.",
                            content = @Content
                    )
            })
    @PutMapping("/actualizar")
    public ResponseEntity<OdontologoDto> actualizarOdontologo(@Valid @RequestBody Odontologo odontologo)
            throws ResourceNotFoundException {
        return ResponseEntity.ok(odontologoService.actualizarOdontologo(odontologo));
    }

    @Operation(summary = "üöÆ Eliminar un odont√≥logo por ID",
            description = "En t√©rminos de soportar ¬øno soportaste m√°s la presencia de aquel odont√≥logo en la " +
                    "cl√≠nica? ¬øY si lo eliminas? üòà",
            responses = {
                    @ApiResponse(
                            responseCode = "200",
                            description = "Ô∏è‚ùå ¬°Felicitaciones! Ese odont√≥logo dej√≥ de ser un problema, ahora " +
                                    "est√° eliminado.",
                            content = @Content
                    ),
                    @ApiResponse(
                            responseCode = "400",
                            description = "üö® ¬°P√°same solamente n√∫meros!",
                            content = @Content
                    ),
                    @ApiResponse(
                            responseCode = "404",
                            description = "üîé Ese odont√≥logo que pensabas que exist√≠a, ya no existe (al menos en " +
                                    "nuestra base de datos).",
                            content = @Content
                    ),
                    @ApiResponse(
                            responseCode = "500",
                            description = "üíª No eres t√∫, es el servidor; por favor, intenta nuevamente en breve.",
                            content = @Content
                    )
            })
    @DeleteMapping("/eliminar/{id}")
    public ResponseEntity<?> eliminarOdontologo(@PathVariable Long id) throws ResourceNotFoundException {
        odontologoService.eliminarOdontologo(id);
        return ResponseEntity.ok("üöÆ Se ha eliminado al odont√≥logo con ID ".concat(id.toString()).concat("."));
    }
}
